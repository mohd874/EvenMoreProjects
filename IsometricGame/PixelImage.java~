package IsometricGame;

import java.awt.image.*;
import java.awt.*;

/*
 * PixelImage.java
 *
 * Created on August 9, 2003, 1:10 PM
 */

/**
 *
 * @author  root
 */
public class PixelImage {
    int width,height;
    int[] pixels;
    MemoryImageSource memImg;
    public static final int OPAQUE_ALPHA = 255 << 24;  // useful constant, when alpha is ignored
    boolean mask[]; // 1 = there is image color in this spot
    Toolkit tk = Toolkit.getDefaultToolkit(); // needed for using createImage()


    int alphaMask = (0xFF << 16) | (0xFF << 8) | 0xFF;
    
    
    /** Creates a new instance of PixelImage */
    public PixelImage(int width,int height) {
        this.width = width;
        this.height = height;
        pixels = new int[width*height];
        memImg = new MemoryImageSource(width,height,pixels,0,width);
    }
    
    // set a pixel to an rgb color
    public void setPixel(int xloc, int yloc, Color c) {
        setPixel(xloc, yloc, c.getRed(), c.getGreen(), c.getBlue());
    }

    public void setPixel(int xloc, int yloc, int r, int g, int b) {
        pixels[xloc + (yloc * width)] =
            OPAQUE_ALPHA | (r << 16) | (g << 8) | b;
    }

    public void setPixel(int xloc, int yloc, int r, int g, int b, int a) {
        pixels[xloc + (yloc * width)] =
            (a << 24) | (r << 16) | (g << 8) | b;
    }
    
    public int getPixel(int xloc, int yloc)
    {
        return pixels[xloc + (yloc*width)];
    }
    
    public void fillImage(int xShift,int yShift,int[] pixels,int width,int height,Color c)
    {
        for(int a=yShift,y=0;a<yShift+height;a++,y++)
            for(int b=xShift,x=0;b<xShift+width;b++,x++)
            {
                int pixel = pixels[y*width+x];
                //System.out.println(pixel);
                if(pixel!=0)
                    setPixel(b,a,c);
            }
    }
    
    public void clearImage()
    {
        for(int a=0;a<pixels.length;a++)
            pixels[a]=0;
    }

    public Image getImage() { return tk.createImage(memImg); }

}
