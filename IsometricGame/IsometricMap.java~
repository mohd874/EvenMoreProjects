/*
 * Mapjava
 *
 * Created on June 17, 2003, 1:18 PM
 */

package IsometricGame;

import java.awt.*;
import java.awt.image.*;
import java.awt.event.*;
import java.awt.geom.*;
import javax.swing.*;
import java.util.*;
import java.io.*;

/**
 *
 * @author  jgauci
 */
public class IsometricMap implements java.io.Serializable  {
	RightWall[][][] rightWalls;
	LeftWall[][][] leftWalls;
	Tile[][][] tileMap;
	LinkedList[][][] itemList;
	Avatar[][][] avatarMap;
	Doodad[][][] doodadMap;
	int[][] heightMap;
	
	
	
	Hashtable itemTable,avatarTable;
	int width,length,height;
	int pixelWidth,pixelLength;
	boolean[][][] isVisible;
	PathCreator pathMaker;
	
		/*final static int tileWidth = 64;
		final static int tileLength = 30;
		final static int wallWidth = tileWidth/2;
		final static int walllength = 90;*/
	final static byte UPLEFT=0,UPRIGHT=1,DOWNRIGHT=2,DOWNLEFT=3;
	final static byte NOWALL = -127,NOTILE = -127;
	
	
	
	/** Creates a new instance of MapMap */
	public IsometricMap(int length, int width,int height) {
		this.width = width;
		this.length = length;
		this.height = height;
		initBase();
		
		for(int z=0;z<height;z++)
			for(int a=0;a<length+1;a++)
				for(int b=0;b<width+1;b++) {
					rightWalls[z][a][b] = new RightWall( (byte)NOWALL, new Point3D.Int(b,a,z));
					leftWalls[z][a][b] = new LeftWall( (byte)NOWALL, new Point3D.Int(b,a,z));
				}
		for(int z=0;z<height;z++)
			for(int a=0;a<length;a++)
				for(int b=0;b<width;b++)
					if(z>0)
						tileMap[z][a][b]=new Tile((byte)NOTILE,new Point3D.Int(b,a,z),leftWalls[z][a][b],rightWalls[z][a][b],leftWalls[z][a][b+1],rightWalls[z][a+1][b]);
					else
						tileMap[z][a][b]=new Tile((byte)1,new Point3D.Int(b,a,z),leftWalls[z][a][b],rightWalls[z][a][b],leftWalls[z][a][b+1],rightWalls[z][a+1][b]);
		
	}
	
	public IsometricMap(DataInputStream inStream) throws IOException {
		length = inStream.readInt();
		width = inStream.readInt();
		height = inStream.readInt();
		initBase();
		
		System.out.println(length + " " + width);
		for(int z=0;z<height;z++)
			for(int a=0;a<length+1;a++) {
				for(int b=0;b<width+1;b++) {
					rightWalls[z][a][b] = new RightWall(inStream.readByte(), new Point3D.Int(b,a,z));
				}
			}
		for(int z=0;z<height;z++)
			for(int a=0;a<length+1;a++) {
				for(int b=0;b<width+1;b++) {
					leftWalls[z][a][b] = new LeftWall(inStream.readByte(), new Point3D.Int(b,a,z));
				}
			}
		
		avatarTable = new Hashtable();
		for(int z=0;z<height;z++)
			for(int a=0;a<length;a++) {
				for(int b=0;b<width;b++) {
					tileMap[z][a][b]=new Tile(inStream.readByte(),new Point3D.Int(b,a,z),leftWalls[z][a][b],rightWalls[z][a][b],leftWalls[z][a][b+1],rightWalls[z][a+1][b]);
					if(inStream.readByte()!=0) {
						Point3D.Int tempPoint = new Point3D.Int(b,a,z);
						avatarMap[z][a][b] = new Avatar(tempPoint, inStream.readInt(), inStream.readInt());
						avatarTable.put(new Integer(avatarMap[z][a][b].avatarID),avatarMap[z][a][b]);
					}
					if(inStream.readByte()!=0) {
						Point3D.Int tempPoint = new Point3D.Int(b,a,z);
						doodadMap[z][a][b] = new Doodad(tempPoint, inStream.readByte());
					}
				}
			}
		
		
		int ItemNum = inStream.readInt();
		for(int a=0;a<ItemNum;a++) {
			int locationx = inStream.readInt();
			int locationy = inStream.readInt();
			int locationz = inStream.readInt();
			Item tempItem = new Item(new Point3D.Int(locationx,locationy,locationz),inStream.readByte(),inStream.readInt());
			itemList[locationz][locationy][locationx].add(tempItem);
			itemTable.put(new Integer(tempItem.ID),tempItem);
		}
	}
	
	public void initBase() {
		pixelWidth = width*Theme.tileWidth/2;
		pixelLength = length*Theme.tileLength;
		rightWalls = new RightWall[height][length+1][width+1];
		leftWalls = new LeftWall[height][length+1][width+1];
		tileMap = new Tile[height][length][width];
		avatarMap = new Avatar[height][length][width];
		doodadMap = new Doodad[height][length][width];
		isVisible = new boolean[height][length][width];
		heightMap = new int[length][width];
		avatarTable = new Hashtable();
		
		itemList = new LinkedList[height][length][width];
		for(int z=0;z<height;z++)
			for(int a=0;a<length;a++)
				for(int b=0;b<width;b++)
					itemList[z][a][b] = new LinkedList();
		itemTable = new Hashtable();
		
		pathMaker = new PathCreator(this);
		
		for(int a=0;a<length;a++)
			for(int b=0;b<width;b++)
				heightMap[a][b]=0;
	}
	
		/*public void syncMap(DataInputStream inStream) throws IOException {
				length = inStream.readInt();
				width = inStream.readInt();
				System.out.println(length + " " + width);
				for(int a=0;a<length+1;a++) {
						for(int b=0;b<width+1;b++) {
								rightWalls[a][b].type = inStream.readByte();
						}
				}
				for(int a=0;a<length+1;a++) {
						for(int b=0;b<width+1;b++) {
								leftWalls[a][b].type = inStream.readByte();
						}
				}
				for(int a=0;a<length;a++) {
						for(int b=0;b<width;b++) {
								tileMap[a][b].type = inStream.readByte();
						}
				}
		 
		 
				for(int y=0;y<length;y++)
						for(int x=0;x<width;x++)
								itemList[y][x].clear();
		 
				int ItemNum = inStream.readInt();
				for(int a=0;a<ItemNum;a++) {
						Point location = new Point(inStream.readInt(),inStream.readInt());
						Item tempItem = new Item(location,inStream.readByte(),inStream.readInt());
						itemList[location.y][location.x].add(tempItem);
				}
		}*/
	
	
	public void setFieldOfView(PlayerClient client,int radius) {
		//Point2D.Double location = new Point2D.Double(0.0f,0.0f);
		for(int z=0;z<height;z++)
			for(int a=0;a<length;a++)
				for(int b=0;b<width;b++) {
					isVisible[z][a][b]=false;
					heightMap[a][b]=height;
				}
		
		Point source;
		for(int z=-radius;z<height+radius;z++)
			for(int y=-radius;y<length+radius;y++)
				for(int x=-radius;x<width+radius;x++) {
					//System.out.println(tileMap[targety][target.x].upRightWall.type!=NOWALL
					for(int a=0;a<client.avatars.size();a++) {
						Point3D.Int target = ((Avatar)client.avatars.elementAt(a)).location;
						if( /*!(tileMap[target.y][target.x].upRightWall.type!=NOWALL&&y<target.y)
										&&!(tileMap[target.y][target.x].upLeftWall.type!=NOWALL&&x<target.x)
										&&!(tileMap[target.y][target.x].downRightWall.type!=NOWALL&&x>target.x)
										&&!(tileMap[target.y][target.x].downLeftWall.type!=NOWALL&&y>target.y)
										&&*/Math.abs((Math.abs(x-target.x)+Math.abs(y-target.y)+Math.abs(z-target.z))-radius)<=1) {
											lineOfSight(target,new Point3D.Int(x,y,(z/2)));
						}
					}
				}
	}
	
	public boolean lineOfSight(Point3D.Int a,Point3D.Int b) {
		Point3D.Double unitVector = new Point3D.Double(b.x-a.x,b.y-a.y,b.z-a.z);
		double magnitude = unitVector.distance(unitVector.x,unitVector.y,unitVector.z,0.0D,0.0D,0.0D);
		unitVector.x /= (magnitude*5.0D);
		unitVector.y /= (magnitude*5.0D);
		unitVector.z /= (magnitude*5.0D);
		Point3D.Double location = new Point3D.Double((double)a.x,(double)a.y,(double)a.z);
		//System.out.println("UNITVECTOR " + unitVector);
		Point3D.Int prevTile = null,curTile = new Point3D.Int(a.x,a.y,a.z);
		for(;location.distance(b)>1.0D;location.y+=unitVector.y,location.x+=unitVector.x,location.z+=unitVector.z) {
			//System.out.println(location);
			curTile.setLocation((int)(location.x+0.5D),(int)(location.y+0.5D),(int)(location.z+0.5D));
			if(prevTile!=null&&prevTile.equals(curTile)) {
				continue;
			}
			if(curTile.z<0||curTile.z>=height||curTile.y<0||curTile.x<0||curTile.y>=length||curTile.x>=width) {
				return false;
			}
			if(prevTile==null) {
				isVisible[curTile.z][curTile.y][curTile.x]=true;
				prevTile = (Point3D.Int)curTile.clone();
			}
			else if(visionNotBlocked(prevTile.x,prevTile.y,prevTile.z,curTile.x,curTile.y,curTile.z)) {
				isVisible[curTile.z][curTile.y][curTile.x]=true;
				prevTile.setLocation(curTile);
			}
			else {
				return false;
			}
		}
		return true;
	}
	
	public boolean visionNotBlocked(int ax,int ay,int az,int bx,int by,int bz) {
		if(ax!=bx&&ay!=by&&az!=bz)
			return false;
		if(ax!=bx&&ay!=by) {
			if(Math.abs(ax-bx)==1&&Math.abs(ay-by)==1)
				return visionNotBlocked(ax, ay, az, ax, by, bz)
				&&visionNotBlocked(ax, ay, az, bx, ay, bz)
				&&visionNotBlocked(ax, by, az, bx, by, bz)
				&&visionNotBlocked(bx, ay, az, bx, by, bz);
			else
				return false;
		}
		if(ax!=bx&&az!=bz) {
			if(Math.abs(ax-bx)==1&&Math.abs(az-bz)==1)
				return visionNotBlocked(ax,ay, az,bx,ay,az)
				&&visionNotBlocked(ax,ay, az,ax,ay,bz)
				&&visionNotBlocked(bx,ay, az,bx,ay,bz)
				&&visionNotBlocked(ax,ay, bz,bx,ay,bz);
			else
				return false;
		}
		if(ay!=by&&az!=bz) {
			if(Math.abs(ay-by)==1&&Math.abs(az-bz)==1)
				return visionNotBlocked(ax,ay, az,ax,ay,bz)
				&&visionNotBlocked(ax,ay, az,ax,by,az)
				&&visionNotBlocked(ax,ay, bz,ax,by,bz)
				&&visionNotBlocked(ax,by, az,ax,by,bz);
			else
				return false;
		}
		
		if(az>bz) {
			if(tileMap[az][ay][ax].type!=IsometricMap.NOTILE&&Theme.tileTypes[tileMap[az][ay][ax].type].seeThrough==false)
				return false;
		}
		if(az<bz) {
			if(tileMap[bz][by][bx].type!=IsometricMap.NOTILE&&Theme.tileTypes[tileMap[bz][by][bx].type].seeThrough==false)
				return false;
		}
		//if(tileMap[a.y][a.x].downRightWall.type!=NOWALL)
		//System.out.println("See Through? " + Theme.wallTypes[tileMap[a.y][a.x].downRightWall.type].seeThrough);
		if(ax<bx&&(tileMap[az][ay][ax].downRightWall.type!=NOWALL&&Theme.wallTypes[tileMap[az][ay][ax].downRightWall.type].seeThrough==false))
			return false;
		if(ax>bx&&(tileMap[az][ay][ax].upLeftWall.type!=NOWALL&&Theme.wallTypes[tileMap[az][ay][ax].upLeftWall.type].seeThrough==false))
			return false;
		if(ay<by&&(tileMap[az][ay][ax].downLeftWall.type!=NOWALL&&Theme.wallTypes[tileMap[az][ay][ax].downLeftWall.type].seeThrough==false))
			return false;
		if(ay>by&&(tileMap[az][ay][ax].upRightWall.type!=NOWALL&&Theme.wallTypes[tileMap[az][ay][ax].upRightWall.type].seeThrough==false))
			return false;
		//System.out.println("No Wall Found");
		return true;
		
	}
	
	public boolean movementBlocked(int ax,int ay,int az,int bx,int by,int bz) {
		if(az>bz) {
			if(doodadMap[az][ay][ax]==null||Theme.doodadTypes[doodadMap[az][ay][ax].type].fallable==false)
				return true;
			else
				return false;
		}
		if(az<bz) {
			if(doodadMap[az][ay][ax]==null||Theme.doodadTypes[doodadMap[az][ay][ax].type].climbable==false)
				return true;
			else
				return false;
		}
		if(ax!=bx&&ay!=by) {
			if(Math.abs(ax-bx)==1&&Math.abs(ay-by)==1)
				return movementBlocked(ax, ay, az, ax, by, bz)||movementBlocked(ax, ay, az, bx, ay, bz)||movementBlocked(ax, by, az, bx, by, bz)||movementBlocked(bx, ay, az, bx, by, bz);
			else
				return true;
		}
		if(ax<bx
		&&(tileMap[bz][by][bx].type==NOTILE||
		Theme.tileTypes[tileMap[bz][by][bx].type].passable==false||
		(tileMap[az][ay][ax].downRightWall.type!=NOWALL&&
		Theme.wallTypes[tileMap[az][ay][ax].downRightWall.type].passable==false))
		) {
			System.out.println("CASE 1");
			return true;
		}
		
		if(ax>bx
		&&(tileMap[bz][by][bx].type==NOTILE||
		Theme.tileTypes[tileMap[bz][by][bx].type].passable==false||
		(tileMap[az][ay][ax].upLeftWall.type!=NOWALL&&
		Theme.wallTypes[tileMap[az][ay][ax].upLeftWall.type].passable==false))
		) {
			System.out.println("CASE 2");
			return true;
		}
		
		if(ay<by
		&&(tileMap[bz][by][bx].type==NOTILE||
		Theme.tileTypes[tileMap[bz][by][bx].type].passable==false||
		(tileMap[az][ay][ax].downLeftWall.type!=NOWALL&&
		Theme.wallTypes[tileMap[az][ay][ax].downLeftWall.type].passable==false))
		) {
			System.out.println("CASE 3");
			return true;
		}
		
		if(ay>by
		&&(tileMap[bz][by][bx].type==NOTILE||
		Theme.tileTypes[tileMap[bz][by][bx].type].passable==false||
		(tileMap[az][ay][ax].upRightWall.type!=NOWALL&&
		Theme.wallTypes[tileMap[az][ay][ax].upRightWall.type].passable==false))
		) {
			System.out.println("CASE 4");
			return true;
		}
		
		//System.out.println("No Wall Found");
		return false;
		
	}
	
	public void getRoof(Vector avatars) {
		for(int a=0;a<avatars.size();a++) {
			Avatar tempAvatar = (Avatar)avatars.elementAt(a);
			int tempHeight = height;
			while(tempHeight-1>tempAvatar.location.z) {
				tempHeight--;
				if(tileMap[tempHeight][tempAvatar.location.y][tempAvatar.location.x].type!=this.NOTILE
				&&Theme.tileTypes[tileMap[tempHeight][tempAvatar.location.y][tempAvatar.location.x].type].seeThrough==false) {
					System.out.println("Running heightmap on height " + tempHeight);
					floodHeight(tempAvatar.location.x, tempAvatar.location.y, tempHeight);
				}
			}
		}
	}
	
	public void floodHeight(int x,int y,int height) {
		if(heightMap[y][x]==(height-1))
			return;
		heightMap[y][x]=height-1;
		if(y>0&&tileMap[height][y-1][x].type!=this.NOTILE)
			floodHeight(x,y-1, height);
		if(x>0&&tileMap[height][y][x-1].type!=this.NOTILE)
			floodHeight(x-1,y, height);
		if(y<length-1&&tileMap[height][y+1][x].type!=this.NOTILE)
			floodHeight(x,y+1, height);
		if(x<width-1&&tileMap[height][y][x+1].type!=this.NOTILE)
			floodHeight(x+1,y, height);
		
	}
	
	public void drawMap(GameClient client) {
		client.midBuffer.setColor(Color.BLACK);
		client.midBuffer.setStroke(Theme.gridStroke);
		client.midBuffer.clearRect(0,0,client.gameWindow.getWidth(),client.gameWindow.getHeight());
		
		for(int z=0;z<height;z++) {
			for(int y=0;y<length;y++)
				for(int x=0;x<width;x++) {
					if(client instanceof PlayerClient&&heightMap[y][x]<z&&client.onHeight<z)
						continue;
					if(client.alphaOn)
						client.midBuffer.setComposite(Theme.drawHiddenComposite);
					if(!isVisible[z][y][x]&&client instanceof PlayerClient)
						tileMap[z][y][x].drawGround(client.midBuffer,client.cameraLoc,true); //fog
					else
						tileMap[z][y][x].drawGround(client.midBuffer,client.cameraLoc,false); //no fog
					client.midBuffer.setComposite(Theme.drawNormalComposite);
				}
			if(client.gridOn&&z==client.onHeight)
				drawGrid(client.midBuffer,client.cameraLoc,client.onHeight);
			//for(int z=0;z<=client.onHeight;z++) {
			for(int y=0;y<length+1;y++) {
				for(int x=0,itemNum=0;x<width+1;x++) {
					if(x==width) {
						if(y==length) {
							if(client instanceof PlayerClient&&heightMap[y-1][x-1]<z&&client.onHeight<z)
								continue;
						}
						else {
							if(client instanceof PlayerClient&&heightMap[y][x-1]<z&&client.onHeight<z)
								continue;
						}
					}
					else if(y==length) {
						if(client instanceof PlayerClient&&heightMap[y-1][x]<z&&client.onHeight<z)
							continue;
					}
					else {
						if(client instanceof PlayerClient&&heightMap[y][x]<z&&client.onHeight<z)
							continue;
					}
					if(client.alphaOn)
						client.midBuffer.setComposite(Theme.drawHiddenComposite);
					if(client.wallsOn) {
						leftWalls[z][y][x].draw(client.midBuffer,client.cameraLoc);
						rightWalls[z][y][x].draw(client.midBuffer,client.cameraLoc);
					}
					client.midBuffer.setComposite(Theme.drawNormalComposite);
					if(x<width&&y<length) {
						if(doodadMap[z][y][x]!=null)
							doodadMap[z][y][x].draw(client.midBuffer,client.cameraLoc);
						for(int t=0;t<itemList[z][y][x].size();t++) {
							((Item)itemList[z][y][x].get(t)).draw(client.midBuffer,client.cameraLoc);
							itemNum++;
						}
						if((!(client instanceof PlayerClient)||isVisible[z][y][x])&&avatarMap[z][y][x]!=null) {
							//System.out.println("drawing avatar at " + x + ',' + y);
							avatarMap[z][y][x].draw(client.midBuffer,client.avatarImage,client.cameraLoc);
						}
					}
				}
			}
			//}
			//System.out.println(client.tileCurrent);
			//for(int z=0;z<=client.onHeight;z++) {
			for(int y=0;y<length;y++) {
				for(int x=0;x<width;x++) {
					if(client.isDragging&& client.lasso.contains(x,y)) {
						tileMap[z][y][x].outline(Color.YELLOW, client.midBuffer, client.cameraLoc);
					}
					if(client.avatarSelected!=null&&client.avatarSelected.location.distance(x,y,z)==0) {
						if(client.connectionID==avatarMap[z][y][x].ownerID)
							tileMap[z][y][x].outline(Color.GREEN,client.midBuffer,client.cameraLoc);
						else
							tileMap[z][y][x].outline(Color.RED,client.midBuffer,client.cameraLoc);
					}
					else if(client.tileCurrent.distance(x,y,z)==0) {
						//System.out.println("DRAWING OUTLINE");
						if(client.barState==1) {
							switch(client.wallCurrent) {
								case GameClient.DOWNLEFT:
									client.midBuffer.setColor(Color.BLUE);
									client.midBuffer.drawLine(tileMap[z][y][x].renderPoint.x- client.cameraLoc.x,tileMap[z][y][x].renderPoint.y+Theme.tileLength/2 - client.cameraLoc.y, tileMap[z][y][x].renderPoint.x+Theme.tileWidth/2- client.cameraLoc.x, tileMap[z][y][x].renderPoint.y+Theme.tileLength - client.cameraLoc.y);
									break;
									
								case GameClient.DOWNRIGHT:
									client.midBuffer.setColor(Color.BLUE);
									client.midBuffer.drawLine(tileMap[z][y][x].renderPoint.x+Theme.tileWidth/2- client.cameraLoc.x,tileMap[z][y][x].renderPoint.y+Theme.tileLength- client.cameraLoc.y, tileMap[z][y][x].renderPoint.x+Theme.tileWidth- client.cameraLoc.x, tileMap[z][y][x].renderPoint.y+Theme.tileLength/2- client.cameraLoc.y);
									break;
									
								case GameClient.UPLEFT:
									client.midBuffer.setColor(Color.BLUE);
									client.midBuffer.drawLine(tileMap[z][y][x].renderPoint.x- client.cameraLoc.x,tileMap[z][y][x].renderPoint.y+Theme.tileLength/2- client.cameraLoc.y, tileMap[z][y][x].renderPoint.x+Theme.tileWidth/2- client.cameraLoc.x, tileMap[z][y][x].renderPoint.y - client.cameraLoc.y);
									break;
									
								case GameClient.UPRIGHT:
									client.midBuffer.setColor(Color.BLUE);
									client.midBuffer.drawLine(tileMap[z][y][x].renderPoint.x + Theme.tileWidth/2 - client.cameraLoc.x,tileMap[z][y][x].renderPoint.y - client.cameraLoc.y, tileMap[z][y][x].renderPoint.x+Theme.tileWidth- client.cameraLoc.x, tileMap[z][y][x].renderPoint.y+Theme.tileLength/2 - client.cameraLoc.y);
									break;
									
							}
						}
						else if(tileMap[z][y][x].type!=NOTILE) {
							//client.midBuffer.drawImage(Theme.highlightImage, renderPoint.x- client.cameraLoc.x, renderPoint.y- client.cameraLoc.y, null);
							tileMap[z][y][x].outline(Color.YELLOW,client.midBuffer,client.cameraLoc);
						}
					}
				}
			}
		}
		client.midBuffer.setStroke(Theme.normalStroke);
		client.midBuffer.setColor(Color.YELLOW);
	}
	
	public void drawGrid(Graphics2D buffer,Point cameraLoc,int height) {
		buffer.setColor(Color.WHITE);
		for(int a=1;a<length;a++) {
			buffer.drawLine(tileMap[height][a][0].renderPoint.x-cameraLoc.x+Theme.tileWidth/2, tileMap[height][a][0].renderPoint.y-cameraLoc.y, tileMap[height][a][0].renderPoint.x+Theme.tileWidth*width/2-cameraLoc.x+Theme.tileWidth/2, tileMap[height][a][0].renderPoint.y+Theme.tileLength*width/2-cameraLoc.y);
		}
		for(int a=1;a<width;a++) {
			buffer.drawLine(tileMap[height][0][a].renderPoint.x-cameraLoc.x+Theme.tileWidth/2, tileMap[height][0][a].renderPoint.y-cameraLoc.y, tileMap[height][0][a].renderPoint.x-Theme.tileWidth*length/2-cameraLoc.x+Theme.tileWidth/2, tileMap[height][0][a].renderPoint.y+Theme.tileLength*length/2-cameraLoc.y);
		}
		buffer.setColor(Color.BLACK);
	}
	
	public void delete() {
		try {
			finalize();
		}
		catch(Throwable e) {
			e.printStackTrace();
		}
	}
	
	public void createRoom(Rectangle lasso,int height,byte barState,byte type) {
		for(int y=0;y<length;y++)
			for(int x=0;x<width;x++) {
				if(lasso.contains(x,y)) {
					if(barState==0) {
						tileMap[height][y][x].type = type;
					}
					else if(barState==1) {
						if(x+1==width||!lasso.contains(x+1,y))
							tileMap[height][y][x].downRightWall.type = type;
						if(x==0||!lasso.contains(x-1,y))
							tileMap[height][y][x].upLeftWall.type = type;
						if(y+1==length||!lasso.contains(x,y+1))
							tileMap[height][y][x].downLeftWall.type = type;
						if(y==0||!lasso.contains(x,y-1))
							tileMap[height][y][x].upRightWall.type = type;
					}
				}
			}
	}
	
	public void deleteWall(int locationx,int locationy,int locationz,byte wallDirection) {
		changeWall(locationx,locationy,locationz,wallDirection, NOWALL);
		
	}
	
	public void changeWall(int locationx,int locationy,int locationz,byte wallDirection,byte wallType) {
		switch(wallDirection) {
			case UPRIGHT:
				System.out.println("drawUPRIGHT: " + locationx + " " + locationy);
				tileMap[locationz][locationy][locationx].upRightWall.type = wallType;
				break;
			case UPLEFT:
				System.out.println("drawUPLEFT: " + locationx + " " + locationy);
				tileMap[locationz][locationy][locationx].upLeftWall.type = wallType;
				break;
			case DOWNLEFT:
				System.out.println("drawDOWNLEFT: " + locationx + " " + locationy);
				tileMap[locationz][locationy][locationx].downLeftWall.type = wallType;
				break;
			case DOWNRIGHT:
				System.out.println("drawDOWNRIGHT: " + locationx + " " + locationy);
				tileMap[locationz][locationy][locationx].downRightWall.type = wallType;
				break;
				
		}
	}
	
	public Item createItem(Point3D.Int location,byte ItemType,int ID) {
		Item tempItem = new Item(location,ItemType,ID);
		itemList[location.z][location.y][location.x].add(tempItem);
		itemTable.put(new Integer(ID), tempItem);
		return tempItem;
	}
	
	public void createDoodad(Point3D.Int location,byte doodadType) {
		doodadMap[location.z][location.y][location.x] = new Doodad(location,doodadType);
	}
	
	public void deleteDoodad(Point3D.Int location) {
		doodadMap[location.z][location.y][location.x] = null;
	}
	
	public void moveItem(Point3D.Int oldLoc,int ItemID,Point3D.Int newLoc) {
		Item tempItem = null;
		for(int t=0;t<itemList[oldLoc.z][oldLoc.y][oldLoc.x].size();t++) {
			if( ((Item)itemList[oldLoc.z][oldLoc.y][oldLoc.x].get(t)).ID == ItemID) {
				tempItem = (Item)itemList[oldLoc.z][oldLoc.y][oldLoc.x].remove(t);
				break;
			}
		}
		if(tempItem!=null) {
			tempItem.location.setLocation(newLoc);
			itemList[newLoc.z][newLoc.y][newLoc.x].add(tempItem);
		}
	}
	
	public void deleteItem(Item target) {
		itemTable.remove(new Integer(target.ID));
		itemList[target.location.z][target.location.y][target.location.x].remove(target);
	}
	
	public void deleteEntitiesAt(int locationx,int locationy,int locationz) {
		itemList[locationz][locationy][locationx].clear();
	}
	
	public void createAvatar(int locationx,int locationy,int locationz,int ownerID,int avatarID) {
		avatarMap[locationz][locationy][locationx]=new Avatar(new Point3D.Int(locationx,locationy,locationz), ownerID, avatarID);
		avatarTable.put(new Integer(avatarMap[locationz][locationy][locationx].avatarID),avatarMap[locationz][locationy][locationx]);
		System.out.println("AVATAR CREATED AT " + locationx + ',' + locationy);
	}
	
	public void moveAvatar(int avatarID,int newx,int newy,int newz) {
		Avatar tempAvatar = ((Avatar)avatarTable.get(new Integer(avatarID)));
		System.out.println("AVATAR " + tempAvatar + " IS MOVING TO TILE TYPE" + tileMap[newz][newy][newx].type);
		avatarMap[tempAvatar.location.z][tempAvatar.location.y][tempAvatar.location.x] = null;
		avatarMap[newz][newy][newx] = tempAvatar;
		tempAvatar.location.setLocation(newx,newy,newz);
		//avatarMap[newy][newx].avatarToMapCoord();
		//System.out.println("AVATAR MOVED FROM " + oldx + ',' + oldy + " TO " + newx + ',' + newy);
	}
	
	public void deleteAvatar(int x,int y,int z) {
		avatarTable.remove(new Integer(avatarMap[z][y][x].avatarID));
		avatarMap[z][y][x] = null;
	}
	
	
	
}
