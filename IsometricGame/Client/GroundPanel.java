/*
 * InventoryPanel.java
 *
 * Created on September 10, 2003, 10:38 AM
 */

package IsometricGame.Client;

import javax.swing.*;
import java.awt.*;
import java.awt.image.*;
import java.util.*;

import IsometricGame.Item.*;
import IsometricGame.Net.PacketOperator;

/**
 *
 * @author  jgauci
 */
public class GroundPanel extends javax.swing.JPanel implements Scrollable {
   java.util.List items;
   PlayerInventoryPanel owner;
   
   /** Creates new form InventoryPanel */
   public GroundPanel(PlayerInventoryPanel owner) {
      initComponents();
      this.owner = owner;
      this.setVisible(false);
   }
   
   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   private void initComponents() {//GEN-BEGIN:initComponents

      setLayout(new java.awt.GridBagLayout());

      setMinimumSize(new java.awt.Dimension(300, 2000));
      setPreferredSize(new java.awt.Dimension(300, 2000));
      addMouseListener(new java.awt.event.MouseAdapter() {
         public void mouseClicked(java.awt.event.MouseEvent evt) {
            formMouseClicked(evt);
         }
      });

   }//GEN-END:initComponents
   
    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
       System.out.println(evt.getPoint());
       synchronized(items) {
	  if(owner.owner.mouseHeldItem==null) {
	     Item tempItem;
	     try {
		tempItem = ((Item)items.get(evt.getY()/50));
	     }
	     catch(java.lang.IndexOutOfBoundsException ioobe) {
		return;
	     }
	     try {
		owner.owner.dout.writeByte(PacketOperator.CHANGE_AVATAR_OBJECTIVE);
		owner.owner.dout.writeInt(owner.owner.avatarSelected.avatarID.intValue());
		owner.owner.dout.writeByte(PacketOperator.GET_OBJECTIVE);
		owner.owner.dout.improvedWriteObject(((Item)items.get(evt.getY()/50)).ID);
	     }
	     catch(java.io.IOException ie) {
		ie.printStackTrace();
	     }
	     //if(owner.inventory.items.add(tempItem))
	     //    items.remove(evt.getY()/50);
	     //Cursor tempCursor = Toolkit.getDefaultToolkit().createCustomCursor(owner.itemHeld.getModel().image,new Point(0,0),"itemCursor");
	     //owner.setCursor(tempCursor);
	  }
	  else {
	     try {
		System.out.println("TRYING TO DROP ITEM");
		owner.owner.dout.writeByte(PacketOperator.CHANGE_AVATAR_OBJECTIVE);
		owner.owner.dout.writeInt(owner.owner.avatarSelected.avatarID.intValue());
		owner.owner.dout.writeByte(PacketOperator.DROP_OBJECTIVE);
		owner.owner.dout.improvedWriteObject(owner.owner.avatarSelected.getLocation());
	     }
	     catch(java.io.IOException ie) {
		ie.printStackTrace();
	     }
	     //items.add(owner.itemHeld);
	     //owner.itemHeld=null;
	     //owner.setCursor(Cursor.getDefaultCursor());
	  }
	  //repaint();
	  owner.repaint();
       }
       // Add your handling code here:
    }//GEN-LAST:event_formMouseClicked
    
    public static void main(String args[]) {
       JFrame myFrame = new JFrame();
       myFrame.setSize(400,300);
       myFrame.getContentPane().add(new GroundPanel(null));
       myFrame.setVisible(true);
    }
    
    public void paintComponent(Graphics g) {
       super.paintComponent(g);
       synchronized(items) {
	  for(int a=0,height=0;a<items.size();a++) {
	     System.out.println(((Item)items.get(a)));
	     BufferedImage tempImage = ((Item)items.get(a)).getModel().image;
	     if(tempImage!=null) {
		g.drawImage(tempImage,0,height,null);
		height+=tempImage.getHeight();
	     }
	  }
       }
       
       g.setColor(Color.WHITE);
       for(int a=1;a<6;a++)
	  g.drawLine(a*50, 0, a*50, 200);
       for(int b=1;b<4;b++)
	  g.drawLine(0, b*50, 300, b*50);
    }
    
    public void update() {
       if(owner.owner.avatarSelected!=null) {
	  this.setVisible(true);
	  IsometricGame.Point3D.Int tempLoc = owner.owner.avatarSelected.getLocation();
	  items = owner.owner.currentMap.itemList[tempLoc.z][tempLoc.y][tempLoc.x];
	  synchronized(items) {
	     int height=0;
	     for(int a=0;a<items.size();a++) {
		BufferedImage tempImage = ((Item)items.get(a)).getModel().image;
		height+=tempImage.getHeight();
	     }
	     if(height<150)
		height=150;
	     System.out.println("seting height to " + height);
	     setMinimumSize(new java.awt.Dimension(300, height));
	     setPreferredSize(new java.awt.Dimension(300, height));
	     owner.setGroundScroll();
	  }
       }
       else {
	  this.setVisible(false);
       }
       repaint();
       owner.repaint();
       
    }
    
    public Dimension getPreferredScrollableViewportSize() {
       return new Dimension(300,1000);
    }
    
    public int getScrollableBlockIncrement(Rectangle visibleRect, int orientation, int direction) {
       return 50;
    }
    
    public boolean getScrollableTracksViewportHeight() {
       return false;
    }
    
    public boolean getScrollableTracksViewportWidth() {
       return false;
    }
    
    public int getScrollableUnitIncrement(Rectangle visibleRect, int orientation, int direction) {
       return 50;
    }
    
   // Variables declaration - do not modify//GEN-BEGIN:variables
   // End of variables declaration//GEN-END:variables
    
}
