/*
 * InventoryPanel.java
 *
 * Created on September 10, 2003, 10:38 AM
 */

package IsometricGame.Client;

import javax.swing.*;
import java.awt.*;
import java.awt.image.*;
import java.util.*;

import IsometricGame.Item.*;

/**
 *
 * @author  jgauci
 */
public class GroundPanel extends javax.swing.JPanel {
    java.util.List items;
    PlayerInventoryPanel owner;
    
    /** Creates new form InventoryPanel */
    public GroundPanel(PlayerInventoryPanel owner) {
        initComponents();
        this.owner = owner;
        this.setVisible(false);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents

        setLayout(new java.awt.GridBagLayout());

        setMinimumSize(new java.awt.Dimension(300, 2000));
        setPreferredSize(new java.awt.Dimension(300, 2000));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

    }//GEN-END:initComponents
    
    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        System.out.println(evt.getPoint());
        synchronized(items) {
            if(owner.itemHeld==null) {
                Item tempItem;
                try {
                    tempItem = ((Item)items.get(evt.getY()/50));
                }
                catch(java.lang.IndexOutOfBoundsException ioobe) {
                    return;
                }
		dout.writeByte(PacketOperator.CHANGE_OBJECTIVE);
		dout.writeByte(PacketOperator.GET_OBJECTIVE);
		dout.writeInt(((Item)items.get(evt.getY()/50)).ID);
                //if(owner.inventory.items.add(tempItem))
		//    items.remove(evt.getY()/50);
		//Cursor tempCursor = Toolkit.getDefaultToolkit().createCustomCursor(owner.itemHeld.getModel().image,new Point(0,0),"itemCursor");
		//owner.setCursor(tempCursor);
            }
            else {
		    dout.writeByte(PacketOperator.CHANGE_OBJECTIVE);
		    dout.writeByte(PacketOperator.DROP_OBJECTIVE);
		    dout.writeInt(owner.itemHeld.ID);
                //items.add(owner.itemHeld);
                //owner.itemHeld=null;
                //owner.setCursor(Cursor.getDefaultCursor());
            }
            //repaint();
            owner.repaint();
        }
        // Add your handling code here:
    }//GEN-LAST:event_formMouseClicked
    
    public static void main(String args[]) {
        JFrame myFrame = new JFrame();
        myFrame.setSize(400,300);
        myFrame.getContentPane().add(new GroundPanel(null));
        myFrame.setVisible(true);
    }

    public void getItem(int itemID)
    {
	if(owner.inventory.items.add(tempItem))
		items.remove(evt.getY()/50);
	else
	{
		System.out.println("getItem() couldn't add the item, even though the server OK'ed it.  Maybe there is a sync conflict?");
	}
    }


    public void dropItem(int itemID)
    {
        items.add(owner.itemHeld);
	owner.itemHeld=null;
	owner.setCursor(Cursor.getDefaultCursor());                                    
    }
    
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        synchronized(items) {
            for(int a=0,height=0;a<items.size();a++) {
                System.out.println(((Item)items.get(a)));
                BufferedImage tempImage = ((Item)items.get(a)).getModel().image;
                if(tempImage!=null) {
                    g.drawImage(tempImage,0,height,null);
                    height+=tempImage.getHeight();
                }
            }
        }
        
        g.setColor(Color.WHITE);
        for(int a=1;a<6;a++)
            g.drawLine(a*50, 0, a*50, 200);
        for(int b=1;b<4;b++)
            g.drawLine(0, b*50, 300, b*50);
    }
    
    public void update(java.util.List newItems) {
        if(items==null&&newItems!=null) {
            items=newItems;
            setVisible(true);
            int height=0;
            for(int a=0;a<items.size();a++) {
                BufferedImage tempImage = ((Item)items.get(a)).getModel().image;
                height+=tempImage.getHeight();
            }
            setMinimumSize(new java.awt.Dimension(300, height));
            setPreferredSize(new java.awt.Dimension(300, height));
            repaint();
            owner.repaint();
            return;
        }
        
        synchronized(items) {
            if(newItems==null) {
                this.items = null;
                this.setVisible(false);
            }
            else {
                items = newItems;
                this.setVisible(true);
                int height=0;
                for(int a=0;a<items.size();a++) {
                    BufferedImage tempImage = ((Item)items.get(a)).getModel().image;
                    height+=tempImage.getHeight();
                }
                setMinimumSize(new java.awt.Dimension(300, height));
                setPreferredSize(new java.awt.Dimension(300, height));
            }
        }
        repaint();
        owner.repaint();
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
}
